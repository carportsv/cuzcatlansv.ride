// Script de verificaci√≥n final para la configuraci√≥n web
const http = require('http');
const fs = require('fs');
const path = require('path');

console.log('üîç Verificaci√≥n final de la configuraci√≥n web...\n');

// Verificar archivos cr√≠ticos
const criticalFiles = [
  'webpack.config.js',
  'src/expo-router-context.js',
  'src/components/CountryPickerWrapper.tsx',
  'app.config.web.js',
  'package.json'
];

console.log('üìÅ Verificando archivos cr√≠ticos:');
criticalFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - NO ENCONTRADO`);
  }
});

// Verificar dependencias
console.log('\nüì¶ Verificando dependencias:');
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const requiredDeps = ['crypto-browserify', 'stream-browserify', 'buffer'];
const devDeps = packageJson.devDependencies || {};

requiredDeps.forEach(dep => {
  if (devDeps[dep]) {
    console.log(`‚úÖ ${dep} - ${devDeps[dep]}`);
  } else {
    console.log(`‚ùå ${dep} - NO INSTALADO`);
  }
});

// Verificar servidor web
console.log('\nüåê Verificando servidor web:');
function checkWebServer() {
  const options = {
    hostname: 'localhost',
    port: 19006,
    path: '/',
    method: 'GET',
    timeout: 5000
  };

  const req = http.request(options, (res) => {
    console.log(`‚úÖ Servidor web respondiendo - Status: ${res.statusCode}`);
    
    if (res.statusCode === 200) {
      console.log('üéâ ¬°Configuraci√≥n web completada exitosamente!');
      console.log('\nüìã Resumen de la configuraci√≥n:');
      console.log('- ‚úÖ Webpack configurado con fallbacks');
      console.log('- ‚úÖ Contexto de expo-router personalizado');
      console.log('- ‚úÖ Alias de m√≥dulos configurados');
      console.log('- ‚úÖ Servidor web funcionando');
      console.log('- ‚úÖ Variables de entorno configuradas');
      
      console.log('\nüöÄ Pr√≥ximos pasos:');
      console.log('1. Abre http://localhost:19006 en tu navegador');
      console.log('2. Prueba la funcionalidad de autenticaci√≥n');
      console.log('3. Prueba la b√∫squeda de direcciones');
      console.log('4. Prueba el sistema h√≠brido de realtime');
      
      console.log('\nüí° Comandos √∫tiles:');
      console.log('- npm run web (iniciar servidor web)');
      console.log('- node check-web-status.js (verificar estado)');
      console.log('- npm run web:test (pruebas automatizadas)');
    }
  });

  req.on('error', (error) => {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå Servidor web no est√° ejecut√°ndose');
      console.log('üí° Ejecuta: npm run web');
    } else {
      console.log(`‚ùå Error de conexi√≥n: ${error.message}`);
    }
  });

  req.on('timeout', () => {
    console.log('‚è∞ Timeout - El servidor no respondi√≥ en 5 segundos');
    req.destroy();
  });

  req.end();
}

checkWebServer(); 